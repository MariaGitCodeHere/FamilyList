{"ast":null,"code":"var _jsxFileName = \"/Users/maria/Documents/PROJECTS/FamilyList-Project/FamilyList/src/App.js\";\nimport React from 'react';\nimport Column from './Column.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openAreaList = selectedSurname => {\n      this.setState({\n        selectedSurname: selectedSurname,\n        selectedArea: null\n      });\n    };\n\n    this.openContactList = selectedArea => {\n      this.setState({\n        selectedArea: selectedArea\n      });\n    };\n\n    this.state = {\n      lastNames: props.surnames,\n      selectedSurname: null,\n      selectedArea: null\n    };\n\n    this.sortList = function (propertyName) {\n      let x = function (a, b) {\n        if (a[propertyName] > b[propertyName]) {\n          return 1;\n        }\n\n        if (a[propertyName] < b[propertyName]) {\n          return -1;\n        }\n\n        return 0;\n      };\n\n      return x;\n    };\n\n    this.transferElements = fields => {\n      this.setState({\n        lastNames: [...this.state.lastNames, {\n          lastName: fields.lastName,\n          areas: [{\n            areaName: fields.areaName,\n            contacts: [{\n              personName: fields.personName,\n              emailLink: fields.fbLink,\n              okLink: fields.emailLink,\n              fbLink: fields.okLink\n            }]\n          }]\n        }]\n      });\n    };\n  }\n\n  render() {\n    let columnAreasList = null;\n    let columnContactList = null;\n\n    if (this.state.selectedSurname) {\n      const allAreas = this.state.selectedSurname.areas.sort(this.sortList('areaName'));\n      const listAreas = allAreas.map(element => /*#__PURE__*/React.createElement(\"li\", {\n        key: element.areaName,\n        onClick: () => this.openContactList(element),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }\n      }, element.areaName));\n      columnAreasList = /*#__PURE__*/React.createElement(Column, {\n        title: \"Districts\",\n        list: listAreas,\n        transferElements: this.transferElements,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }\n      });\n    }\n\n    if (this.state.selectedArea) {\n      const allContacts = this.state.selectedArea.contacts.sort(this.sortList('personName'));\n      const listContacts = allContacts.map(element => /*#__PURE__*/React.createElement(\"li\", {\n        key: element.personName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 5\n        }\n      }, element.personName, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: element.emailLink,\n        className: \"link-hovered\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, \"email\")), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: element.fbLink,\n        className: \"link-hovered\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }, \"fb\")), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: element.okLink,\n        className: \"link-hovered\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, \"ok\"))));\n      columnContactList = /*#__PURE__*/React.createElement(Column, {\n        title: \"Contacts\",\n        list: listContacts,\n        transferElements: this.transferElements,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 5\n        }\n      });\n    }\n\n    const allLastNames = this.state.lastNames.sort(this.sortList('lastName'));\n    const listSurnames = allLastNames.map(element => /*#__PURE__*/React.createElement(\"li\", {\n      key: element.lastName,\n      onClick: () => this.openAreaList(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 4\n      }\n    }, element.lastName));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      title: \"Surnames\",\n      list: listSurnames,\n      transferElements: this.transferElements,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }), columnAreasList, columnContactList);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/maria/Documents/PROJECTS/FamilyList-Project/FamilyList/src/App.js"],"names":["React","Column","App","Component","constructor","props","openAreaList","selectedSurname","setState","selectedArea","openContactList","state","lastNames","surnames","sortList","propertyName","x","a","b","transferElements","fields","lastName","areas","areaName","contacts","personName","emailLink","fbLink","okLink","render","columnAreasList","columnContactList","allAreas","sort","listAreas","map","element","allContacts","listContacts","allLastNames","listSurnames"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAuHnBC,YAvHmB,GAuHJC,eAAe,IAAI;AACjC,WAAKC,QAAL,CAAc;AACbD,QAAAA,eAAe,EAAEA,eADJ;AAEbE,QAAAA,YAAY,EAAE;AAFD,OAAd;AAIA,KA5HkB;;AAAA,SA6HnBC,eA7HmB,GA6HDD,YAAY,IAAI;AACjC,WAAKD,QAAL,CAAc;AACbC,QAAAA,YAAY,EAAEA;AADD,OAAd;AAIA,KAlIkB;;AAElB,SAAKE,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAEP,KAAK,CAACQ,QADL;AAEZN,MAAAA,eAAe,EAAE,IAFL;AAGZE,MAAAA,YAAY,EAAE;AAHF,KAAb;;AAKA,SAAKK,QAAL,GAAgB,UAAUC,YAAV,EAAwB;AACvC,UAAIC,CAAC,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtB,YAAID,CAAC,CAACF,YAAD,CAAD,GAAkBG,CAAC,CAACH,YAAD,CAAvB,EAAuC;AACrC,iBAAO,CAAP;AACD;;AACD,YAAIE,CAAC,CAACF,YAAD,CAAD,GAAkBG,CAAC,CAACH,YAAD,CAAvB,EAAuC;AACrC,iBAAO,CAAC,CAAR;AACD;;AACD,eAAO,CAAP;AACD,OARD;;AASA,aAAOC,CAAP;AACA,KAXD;;AAYA,SAAKG,gBAAL,GAAyBC,MAAD,IAAY;AAC/B,WAAKZ,QAAL,CAAc;AACXI,QAAAA,SAAS,EAAE,CACJ,GAAG,KAAKD,KAAL,CAAWC,SADV,EAEJ;AACGS,UAAAA,QAAQ,EAAED,MAAM,CAACC,QADpB;AAEGC,UAAAA,KAAK,EAAE,CACN;AACCC,YAAAA,QAAQ,EAAEH,MAAM,CAACG,QADlB;AAECC,YAAAA,QAAQ,EAAE,CACT;AACCC,cAAAA,UAAU,EAAEL,MAAM,CAACK,UADpB;AAECC,cAAAA,SAAS,EAAEN,MAAM,CAACO,MAFnB;AAGCC,cAAAA,MAAM,EAAER,MAAM,CAACM,SAHhB;AAICC,cAAAA,MAAM,EAAEP,MAAM,CAACQ;AAJhB,aADS;AAFX,WADM;AAFV,SAFI;AADA,OAAd;AAqBJ,KAtBD;AAuBA;;AAGDC,EAAAA,MAAM,GAAG;AACR,QAAIC,eAAe,GAAG,IAAtB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;;AAEA,QAAI,KAAKpB,KAAL,CAAWJ,eAAf,EAAgC;AAC/B,YAAMyB,QAAQ,GAAG,KAAKrB,KAAL,CAAWJ,eAAX,CAA2Be,KAA3B,CAAiCW,IAAjC,CAAsC,KAAKnB,QAAL,CAAc,UAAd,CAAtC,CAAjB;AACA,YAAMoB,SAAS,GAAGF,QAAQ,CAACG,GAAT,CAAaC,OAAO,iBACpC;AACC,QAAA,GAAG,EAAEA,OAAO,CAACb,QADd;AAEC,QAAA,OAAO,EAAE,MAAM,KAAKb,eAAL,CAAqB0B,OAArB,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAICA,OAAO,CAACb,QAJT,CADgB,CAAlB;AAQAO,MAAAA,eAAe,gBACd,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,IAAI,EAAEI,SAAhC;AAA2C,QAAA,gBAAgB,EAAE,KAAKf,gBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAGA;;AAED,QAAI,KAAKR,KAAL,CAAWF,YAAf,EAA6B;AAC5B,YAAM4B,WAAW,GAAG,KAAK1B,KAAL,CAAWF,YAAX,CAAwBe,QAAxB,CAAiCS,IAAjC,CAAsC,KAAKnB,QAAL,CAAc,YAAd,CAAtC,CAApB;AACA,YAAMwB,YAAY,GAAGD,WAAW,CAACF,GAAZ,CAAgBC,OAAO,iBAC3C;AACC,QAAA,GAAG,EAAEA,OAAO,CAACX,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGCW,OAAO,CAACX,UAHT,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AACC,QAAA,IAAI,EAAEW,OAAO,CAACV,SADf;AAEC,QAAA,SAAS,EAAC,cAFX;AAGC,QAAA,MAAM,EAAC,QAHR;AAGiB,QAAA,GAAG,EAAC,qBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,CAJD,eAWC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AACC,QAAA,IAAI,EAAEU,OAAO,CAACT,MADf;AAEC,QAAA,SAAS,EAAC,cAFX;AAGC,QAAA,MAAM,EAAC,QAHR;AAGiB,QAAA,GAAG,EAAC,qBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CAXD,eAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AACC,QAAA,IAAI,EAAES,OAAO,CAACR,MADf;AAEC,QAAA,SAAS,EAAC,cAFX;AAGC,QAAA,MAAM,EAAC,QAHR;AAGiB,QAAA,GAAG,EAAC,qBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CAlBD,CADoB,CAArB;AA4BAG,MAAAA,iBAAiB,gBAChB,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAEO,YAA/B;AAA6C,QAAA,gBAAgB,EAAE,KAAKnB,gBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAGA;;AAGD,UAAMoB,YAAY,GAAG,KAAK5B,KAAL,CAAWC,SAAX,CAAqBqB,IAArB,CAA0B,KAAKnB,QAAL,CAAc,UAAd,CAA1B,CAArB;AACA,UAAM0B,YAAY,GAAGD,YAAY,CAACJ,GAAb,CAAiBC,OAAO,iBAC5C;AACC,MAAA,GAAG,EAAEA,OAAO,CAACf,QADd;AAEC,MAAA,OAAO,EAAE,MAAM,KAAKf,YAAL,CAAkB8B,OAAlB,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAICA,OAAO,CAACf,QAJT,CADoB,CAArB;AAQA,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,IAAI,EAAEmB,YAA/B;AAA6C,MAAA,gBAAgB,EAAE,KAAKrB,gBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEEW,eAFF,EAGEC,iBAHF,CADD;AASA;;AAvHgC;;AAsIlC,eAAe7B,GAAf","sourcesContent":["import React from 'react';\nimport Column from './Column.js';\nimport './App.css';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlastNames: props.surnames,\n\t\t\tselectedSurname: null,\n\t\t\tselectedArea: null\n\t\t};\n\t\tthis.sortList = function (propertyName) {\n\t\t\tlet x = function (a, b) {\n\t\t\t  if (a[propertyName] > b[propertyName]) {\n\t\t\t    return 1;\n\t\t\t  }\n\t\t\t  if (a[propertyName] < b[propertyName]) {\n\t\t\t    return -1;\n\t\t\t  }\n\t\t\t  return 0;\n\t\t\t}\n\t\t\treturn x\n\t\t}\n\t\tthis.transferElements = (fields) => {\n    \t \tthis.setState({\n\t        \tlastNames: [\n\t                ...this.state.lastNames,\n\t                {\n\t                  \tlastName: fields.lastName,\n\t                  \tareas: [\n\t\t                  \t{\n\t\t                  \t\tareaName: fields.areaName,\n\t\t                  \t\tcontacts: [\n\t\t                  \t\t\t{\n\t\t                  \t\t\t\tpersonName: fields.personName,\n\t\t                  \t\t\t\temailLink: fields.fbLink,\n\t\t                  \t\t\t\tokLink: fields.emailLink,\n\t\t                  \t\t\t\tfbLink: fields.okLink\n\t\t                  \t\t\t}\n\t\t                  \t\t]\n\t\t                  \t}\n\t\t                ]\n\t               }\n\t            ]\n\t     \t});\n\t\t}\n\t}\n\n\n\trender() {\n\t\tlet columnAreasList = null;\n\t\tlet columnContactList = null;\n\n\t\tif (this.state.selectedSurname) {\n\t\t\tconst allAreas = this.state.selectedSurname.areas.sort(this.sortList('areaName'))\n\t\t\tconst listAreas = allAreas.map(element => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tkey={element.areaName}\n\t\t\t\t\t\tonClick={() => this.openContactList(element)}\n\t\t\t\t\t>\n\t\t\t\t\t{element.areaName}\n\t\t\t\t\t</li>\n\t\t\t))\n\t\t\tcolumnAreasList = (\n\t\t\t\t<Column title=\"Districts\" list={listAreas} transferElements={this.transferElements} />\n\t\t\t)\n\t\t}\n\n\t\tif (this.state.selectedArea) {\n\t\t\tconst allContacts = this.state.selectedArea.contacts.sort(this.sortList('personName'))\n\t\t\tconst listContacts = allContacts.map(element => (\n\t\t\t\t<li\n\t\t\t\t\tkey={element.personName}\n\t\t\t\t>\n\t\t\t\t{element.personName}\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<a \n\t\t\t\t\t\t\thref={element.emailLink} \n\t\t\t\t\t\t\tclassName=\"link-hovered\"\n\t\t\t\t\t\t\ttarget=\"_blank\" rel=\"noopener noreferrer\">email\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<a \n\t\t\t\t\t\t\thref={element.fbLink} \n\t\t\t\t\t\t\tclassName=\"link-hovered\"\n\t\t\t\t\t\t\ttarget=\"_blank\" rel=\"noopener noreferrer\">fb\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<a \n\t\t\t\t\t\t\thref={element.okLink} \n\t\t\t\t\t\t\tclassName=\"link-hovered\"\n\t\t\t\t\t\t\ttarget=\"_blank\" rel=\"noopener noreferrer\">ok\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</span>\n\t\t\t\t</li>\n\t\t\t))\n\t\t\tcolumnContactList = (\n\t\t\t\t<Column title=\"Contacts\" list={listContacts} transferElements={this.transferElements} />\n\t\t\t)\n\t\t}\n\n\n\t\tconst allLastNames = this.state.lastNames.sort(this.sortList('lastName'))\n\t\tconst listSurnames = allLastNames.map(element => (\n\t\t\t<li \n\t\t\t\tkey={element.lastName}\n\t\t\t\tonClick={() => this.openAreaList(element)}\n\t\t\t>\n\t\t\t{element.lastName}\n\t\t\t</li>\n\t\t))\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Column title=\"Surnames\" list={listSurnames} transferElements={this.transferElements} />\n\t\t\t\t{columnAreasList}\n\t\t\t\t{columnContactList}\n\t\t\t</div>\n\t\t)\n\n\n\t}\n\topenAreaList = selectedSurname => {\n\t\tthis.setState({\n\t\t\tselectedSurname: selectedSurname,\n\t\t\tselectedArea: null\n\t\t})\n\t}\n\topenContactList = selectedArea => {\n\t\tthis.setState({\n\t\t\tselectedArea: selectedArea,\n\t\t})\n\n\t}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}